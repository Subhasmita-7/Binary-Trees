ITERATIVE ORDER FOR PREORDER TRAVERSAL

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> ar = new ArrayList<>();
        if(root == null){
            return ar;
        }

        Stack<TreeNode> st = new Stack<>();
        st.push(root);
        while(!st.isEmpty()){
            root = st.pop();

            ar.add(root.val);

            if(root.right != null){
                st.push(root.right);     //its stack so last in first out so we added left later :)
            }
            if(root.left != null){
                st.push(root.left);
            }
        }
        return ar;
    }
}
