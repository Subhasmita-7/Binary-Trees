the difference of right subtree and left subtree should not be greater than 1. hence balanced.


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isBalanced(TreeNode root) {
        return balance(root) != -1;
    }

    private int balance(TreeNode root){
        if(root == null){
            return 0;
        }

        int leftsubtree = balance(root.left);
        if(leftsubtree == -1){
            return -1;
        }

        int rightsubtree = balance(root.right);
        if(rightsubtree == -1){
            return -1;
        }

        if(Math.abs(leftsubtree - rightsubtree) > 1){
            return -1;
        }
        return Math.max(leftsubtree , rightsubtree)+1;
    }
}
